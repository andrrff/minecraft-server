# Arquivo YAML para implantar um servidor Minecraft (modo offline) no Kubernetes
# Imagem Docker: itzg/minecraft-server
# This version relies on dynamic provisioning by the 'microk8s-hostpath' StorageClass.
# Manually defined PersistentVolume sections have been removed.

---
# 1. Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: minecraft-server-ns # Nome do namespace
spec:
  finalizers:
    - kubernetes

---
# 2. StatefulSet
# Define o StatefulSet para gerenciar o pod do servidor Minecraft.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minecraft-server
  namespace: minecraft-server-ns # Implanta no namespace criado acima
  labels:
    app: minecraft-server
spec:
  serviceName: minecraft-service # Nome do Service que gerencia este StatefulSet
  replicas: 1 # Apenas uma rÃ©plica para um servidor Minecraft padrÃ£o
  selector:
    matchLabels:
      app: minecraft-server # Deve corresponder aos labels do template do pod
  template:
    metadata:
      labels:
        app: minecraft-server # Labels aplicados ao pod
    spec:
      initContainers:
      - name: volume-wait
        image: busybox
        # Increased sleep slightly to give more time for dynamic provisioner
        command: ["sh", "-c", "echo 'Waiting for volumes to be attached by provisioner...' && sleep 10"]
      containers:
        - name: minecraft-server-container
          image: itzg/minecraft-server:latest # Imagem Docker do servidor Minecraft
          imagePullPolicy: Always
          ports:
            - containerPort: 25565 # Porta padrÃ£o do Minecraft
              name: minecraft-tcp
            - containerPort: 25575 # Porta para RCON
              name: rcon-tcp

          env:
            # ConfiguraÃ§Ãµes Essenciais
            - name: EULA
              value: "TRUE"
            - name: ONLINE_MODE
              value: "false"
            - name: MEMORY # Let the image's startup script or JVM_XX_OPTS handle it
              value: ""
            - name: JVM_XX_OPTS
              value: "-XX:MaxRAMPercentage=75.0"
            - name: TYPE
              value: "FABRIC"
            - name: VERSION
              value: "1.21" # Specify your desired Minecraft version

            # ConfiguraÃ§Ãµes de AFK e ociosidade
            - name: ENABLE_AUTOPAUSE
              value: "true"
            - name: AUTOPAUSE_TIMEOUT_EST
              value: "900"
            - name: AUTOPAUSE_TIMEOUT_INIT
              value: "300"
            - name: AUTOPAUSE_PERIOD
              value: "10"

            # ConfiguraÃ§Ãµes do Jogo (Exemplos)
            - name: SERVER_NAME
              value: "ðŸ”¥Tales of Gozas ServerðŸ”¥"
            - name: MOTD
              value: "Â§6Â§lâœ¨ Bem-vindo ao Â§cÂ§lðŸ”¥Tales of Gozas ServerðŸ”¥Â§r Â§6Â§lâœ¨\nÂ§aÂ§oâ–º VersÃ£o 1.21 Fabric Â§e[Modo Offline]"
            - name: WELCOME_MESSAGE
              value: "Â§2Bem-vindo ao servidor, Â§b{PLAYER}Â§2! Esperamos que vocÃª se divirta conosco.\nÂ§6Regras:\nÂ§f- Respeite os outros jogadores\nÂ§f- NÃ£o griefing\nÂ§f- Divirta-se!"
            - name: DIFFICULTY
              value: "normal"
            - name: MAX_PLAYERS
              value: "15"
            - name: SPAWN_PROTECTION
              value: "0"
            - name: ALLOW_NETHER
              value: "true"
            - name: ANNOUNCE_PLAYER_ACHIEVEMENTS
              value: "true"
            - name: ENABLE_COMMAND_BLOCK
              value: "false"
            - name: FORCE_GAMEMODE
              value: "false"
            - name: GENERATE_STRUCTURES
              value: "true"
            - name: PVP
              value: "true"
            - name: VIEW_DISTANCE
              value: "18"
            - name: SEED
              value: "7328636133801045505"

            # ConfiguraÃ§Ãµes do RCON (habilitado)
            - name: ENABLE_RCON
              value: "true"
            - name: RCON_PORT
              value: "25575"
            - name: RCON_PASSWORD
              # Ensure this password matches the one in your 'minecraft-rcon-secret'
              value: "minecraft_secure_password"

          volumeMounts:
            - name: minecraft-data # Mounts the PVC created by volumeClaimTemplates
              mountPath: /data
          resources: # RequisiÃ§Ãµes e limites de recursos
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "7Gi"
              cpu: "2000m"
          livenessProbe:
            tcpSocket:
              port: 25565
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 25565
            initialDelaySeconds: 180
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5

  volumeClaimTemplates: # Define o template para o PersistentVolumeClaim
    - metadata:
        name: minecraft-data # PVC name will be 'minecraft-data-minecraft-server-0'
        namespace: minecraft-server-ns
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
        # Rely on dynamic provisioning by the specified StorageClass
        storageClassName: "microk8s-hostpath"

---
# 3. Service
# ExpÃµe o servidor Minecraft para acesso externo usando NodePort.
apiVersion: v1
kind: Service
metadata:
  name: minecraft-service
  namespace: minecraft-server-ns
  labels:
    app: minecraft-server
spec:
  type: NodePort
  externalTrafficPolicy: Local
  ports:
    - port: 25565
      targetPort: 25565
      nodePort: 32414 # Ensure this port is free on your host
      protocol: TCP
      name: minecraft-tcp
    - port: 25575
      targetPort: 25575
      nodePort: 31249 # Ensure this port is free on your host
      protocol: TCP
      name: rcon-tcp
  selector:
    app: minecraft-server

---
# PersistentVolume definitions are REMOVED.
# We are relying on dynamic provisioning by the 'microk8s-hostpath' StorageClass.
# The actual host paths for the dynamically created PVs will be managed by MicroK8s,
# typically under a path like /var/snap/microk8s/common/default-storage/
---

# 4. PersistentVolumeClaim para armazenar os backups
# This PVC will also be dynamically provisioned by 'microk8s-hostpath'.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minecraft-backup-storage
  namespace: minecraft-server-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi # Tamanho do armazenamento para backups
  storageClassName: "microk8s-hostpath"

---
# 5. ConfigMap com script de backup
apiVersion: v1
kind: ConfigMap
metadata:
  name: minecraft-backup-script
  namespace: minecraft-server-ns
data:
  backup.sh: |
    #!/bin/bash
    set -eo pipefail # Exit on error, treat unset variables as an error, and propagate pipeline errors

    # Configuration
    BACKUP_DIR="/backups"
    SOURCE_DIR="/minecraft-data" # Mount path of the Minecraft server data in this backup container
    RETENTION_DAYS=30
    TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
    BACKUP_FILE="$BACKUP_DIR/minecraft-backup-$TIMESTAMP.tar.gz"
    RCON_HOST="minecraft-service.minecraft-server-ns.svc.cluster.local" # Kubernetes service DNS for RCON
    RCON_PORT_VAR="${RCON_PORT:-25575}" # Use RCON_PORT env var if set, otherwise default
    RCON_PASSWORD_VAR="${RCON_PASSWORD}" # Expect RCON_PASSWORD to be passed as env var from Secret

    RCON_AVAILABLE="false"
    # Check if rcon-cli is installed, if not, try to install it
    if command -v rcon-cli &> /dev/null; then
      RCON_AVAILABLE="true"
    else
      echo "rcon-cli not found. Attempting to install..."
      # Update package list and install dependencies, then rcon-cli
      if apt-get update && apt-get install -y wget tar gzip && \
         wget https://github.com/itzg/rcon-cli/releases/download/1.6.0/rcon-cli_1.6.0_linux_amd64.tar.gz -O /tmp/rcon-cli.tar.gz && \
         tar -xzf /tmp/rcon-cli.tar.gz -C /usr/local/bin rcon-cli && \
         rm /tmp/rcon-cli.tar.gz; then
        echo "rcon-cli installed successfully."
        RCON_AVAILABLE="true"
      else
        echo "Failed to install rcon-cli. Continuing without RCON notifications."
      fi
    fi

    # Function to send RCON commands
    send_rcon() {
      if [ "$RCON_AVAILABLE" == "true" ] && [ -n "$RCON_PASSWORD_VAR" ]; then
        echo "Sending RCON command: $1"
        # Timeout for rcon command to prevent hanging
        timeout 10s rcon-cli --host "$RCON_HOST" --port "$RCON_PORT_VAR" --password "$RCON_PASSWORD_VAR" "$1" || echo "RCON command failed or timed out: $1"
      else
        echo "RCON not available or password not configured. RCON command ignored: $1"
      fi
    }

    # Notify server, save, and turn off auto-save
    send_rcon "say Â§e[SISTEMA] Â§6Iniciando backup do servidor... Pode haver alguma lentidÃ£o."
    send_rcon "save-all"
    send_rcon "save-off"
    sleep 10 # Allow time for save-off to take effect

    echo "Starting backup at $(date)"
    echo "Compressing server files from $SOURCE_DIR to $BACKUP_FILE"

    # Check if source directory is empty or accessible
    if [ -z "$(ls -A $SOURCE_DIR 2>/dev/null)" ] && [ "$(find $SOURCE_DIR -mindepth 1 -print -quit 2>/dev/null)" == "" ]; then
      echo "Error: Source directory $SOURCE_DIR is empty or not accessible. Aborting backup."
      send_rcon "save-on" # Re-enable saving
      send_rcon "say Â§c[SISTEMA] Â§4Backup failed: Server data directory is empty or inaccessible."
      exit 1
    fi

    # Create tar.gz backup
    tar -czf "$BACKUP_FILE" \
      --exclude="./logs/*.log.gz" \
      --exclude="./crash-reports" \
      --exclude="./debug" \
      --warning=no-file-changed \
      -C "$SOURCE_DIR" . # Backup the contents of SOURCE_DIR

    BACKUP_STATUS=$?
    send_rcon "save-on" # Re-enable auto-save

    if [ $BACKUP_STATUS -eq 0 ] || [ $BACKUP_STATUS -eq 1 ]; then # tar exits 1 if files changed
      echo "Backup completed successfully: $BACKUP_FILE"
      echo "Backup size: $(du -h "$BACKUP_FILE" | cut -f1)"
      send_rcon "say Â§e[SISTEMA] Â§aBackup concluÃ­do com sucesso."
    else
      echo "Failed to create backup! Error code: $BACKUP_STATUS"
      send_rcon "say Â§c[SISTEMA] Â§4Falha ao criar backup. Verifique os logs do job de backup."
      # rm -f "$BACKUP_FILE" # Optionally remove failed backup attempt
      exit 1
    fi

    # Remove old backups
    echo "Checking and removing old backups (older than $RETENTION_DAYS days)..."
    find "$BACKUP_DIR" -name "minecraft-backup-*.tar.gz" -type f -mtime +"$RETENTION_DAYS" -print -delete

    echo "Total space used by backups: $(du -sh "$BACKUP_DIR" | cut -f1)"
    echo "Backup process finished at $(date)."

---
# 6. CronJob para executar o backup automaticamente
apiVersion: batch/v1
kind: CronJob
metadata:
  name: minecraft-backup
  namespace: minecraft-server-ns
spec:
  schedule: "0 */12 * * *"  # Every 12 hours (at 00:00 and 12:00 UTC by default)
  concurrencyPolicy: Forbid   # Do not allow concurrent runs
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-container
            image: debian:bullseye-slim # Base image for backup script
            # The script itself handles rcon-cli installation if needed
            command: ["/scripts/backup.sh"]
            env:
              - name: RCON_PASSWORD # Pass RCON password from Secret
                valueFrom:
                  secretKeyRef:
                    name: minecraft-rcon-secret # Name of the Secret
                    key: rcon-password        # Key within the Secret
            volumeMounts:
            - name: minecraft-data-source # Source PVC (Minecraft server data)
              mountPath: /minecraft-data
              readOnly: true # Mount as read-only for safety
            - name: backup-storage      # Destination PVC (backup storage)
              mountPath: /backups
            - name: backup-script       # ConfigMap containing the backup script
              mountPath: /scripts
          restartPolicy: OnFailure
          volumes:
          - name: minecraft-data-source
            persistentVolumeClaim:
              # This PVC is created by the StatefulSet's volumeClaimTemplates
              claimName: minecraft-data-minecraft-server-0
          - name: backup-storage
            persistentVolumeClaim:
              # This PVC is defined above for backup storage
              claimName: minecraft-backup-storage
          - name: backup-script
            configMap:
              name: minecraft-backup-script
              defaultMode: 0755 # Make the script executable

---
# REMINDER: Create the RCON Secret manually if it doesn't exist.
# Example:
# microk8s kubectl create secret generic minecraft-rcon-secret \
#   --from-literal=rcon-password='your_actual_rcon_password' \
#   -n minecraft-server-ns
