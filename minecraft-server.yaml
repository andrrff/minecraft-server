# Arquivo YAML para implantar um servidor Minecraft (modo offline) no Kubernetes
# Imagem Docker: itzg/minecraft-server

---
# 1. Namespace
# Cria um namespace dedicado para os recursos do servidor Minecraft.
apiVersion: v1
kind: Namespace
metadata:
  name: minecraft-server-ns # Nome do namespace
spec:
  finalizers:
    - kubernetes

---
# 2. StatefulSet
# Define o StatefulSet para gerenciar o pod do servidor Minecraft.
# StatefulSets s√£o ideais para aplica√ß√µes com estado, como servidores de jogos.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minecraft-server
  namespace: minecraft-server-ns # Implanta no namespace criado acima
  labels:
    app: minecraft-server
spec:
  serviceName: minecraft-service # Nome do Service que gerencia este StatefulSet
  replicas: 1 # Apenas uma r√©plica para um servidor Minecraft padr√£o
  selector:
    matchLabels:
      app: minecraft-server # Deve corresponder aos labels do template do pod
  template:
    metadata:
      labels:
        app: minecraft-server # Labels aplicados ao pod
    spec:
      # Add a small delay to give the provisioner time to work
      initContainers:
      - name: volume-wait
        image: busybox
        command: ["sh", "-c", "echo 'Waiting for volumes to be attached...' && sleep 5"]
      containers:
        - name: minecraft-server-container
          image: itzg/minecraft-server:latest # Imagem Docker do servidor Minecraft
          imagePullPolicy: Always
          ports:
            - containerPort: 25565 # Porta padr√£o do Minecraft
              name: minecraft-tcp
            - containerPort: 25575 # Porta para RCON
              name: rcon-tcp

          env:
            # Configura√ß√µes Essenciais
            - name: EULA
              value: "TRUE"
            - name: ONLINE_MODE
              value: "false"
            - name: MEMORY
              value: "" # Let the image's startup script or JVM_XX_OPTS handle it
            - name: JVM_XX_OPTS
              value: "-XX:MaxRAMPercentage=75.0"
            - name: TYPE
              value: "FABRIC" # Example: PAPER, SPIGOT, FORGE, FABRIC, VANILLA
            - name: VERSION
              value: "1.21" # Specify your desired Minecraft version, or "LATEST"

            # Configura√ß√µes de AFK e ociosidade
            - name: ENABLE_AUTOPAUSE
              value: "true"
            - name: AUTOPAUSE_TIMEOUT_EST
              value: "900" # 15 minutos antes de considerar um jogador como AFK
            - name: AUTOPAUSE_TIMEOUT_INIT
              value: "300" # 5 minutos antes de pausar o servidor ap√≥s o √∫ltimo jogador sair
            - name: AUTOPAUSE_PERIOD
              value: "10" # Intervalo em segundos para verificar jogadores AFK

            # Configura√ß√µes do Jogo (Exemplos)
            - name: SERVER_NAME
              value: "üî•Tales of Gozas Serverüî•"
            - name: MOTD
              value: "¬ß6¬ßl‚ú® Bem-vindo ao ¬ßc¬ßlüî•Tales of Gozas Serverüî•¬ßr ¬ß6¬ßl‚ú®\n¬ßa¬ßo‚ñ∫ Vers√£o 1.21 Fabric ¬ße[Modo Offline]"
            - name: WELCOME_MESSAGE
              value: "¬ß2Bem-vindo ao servidor, ¬ßb{PLAYER}¬ß2! Esperamos que voc√™ se divirta conosco.\n¬ß6Regras:\n¬ßf- Respeite os outros jogadores\n¬ßf- N√£o griefing\n¬ßf- Divirta-se!"
            - name: DIFFICULTY
              value: "normal" # easy, normal, hard, peaceful
            - name: MAX_PLAYERS
              value: "15"
            - name: SPAWN_PROTECTION
              value: "0"
            - name: ALLOW_NETHER
              value: "true"
            - name: ANNOUNCE_PLAYER_ACHIEVEMENTS
              value: "true"
            - name: ENABLE_COMMAND_BLOCK
              value: "false"
            - name: FORCE_GAMEMODE
              value: "false"
            - name: GENERATE_STRUCTURES
              value: "true"
            - name: PVP
              value: "true"
            - name: VIEW_DISTANCE
              value: "18"
            - name: SEED
              value: "7328636133801045505" # Seed do mundo personalizada

            # Configura√ß√µes do RCON (habilitado)
            - name: ENABLE_RCON
              value: "true"
            - name: RCON_PORT
              value: "25575"
            - name: RCON_PASSWORD
              value: "minecraft_secure_password" # Recomendado: use uma senha mais segura

          volumeMounts:
            - name: minecraft-data # Monta o volume persistente
              mountPath: /data # Diret√≥rio onde os dados do servidor s√£o armazenados na imagem
          resources: # Requisi√ß√µes e limites de recursos (ajuste conforme necess√°rio)
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "7Gi" # M√°ximo de mem√≥ria permitida
              cpu: "2000m"  # M√°ximo de CPU permitida (2 cores)
          livenessProbe: # Verifica se o container est√° vivo
            tcpSocket:
              port: 25565
            initialDelaySeconds: 120 # Increased initial delay
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe: # Verifica se o container est√° pronto para receber tr√°fego
            tcpSocket:
              port: 25565
            initialDelaySeconds: 180 # Increased initial delay (tempo para o servidor iniciar completamente)
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5

  volumeClaimTemplates: # Define o template para o PersistentVolumeClaim
    - metadata:
        name: minecraft-data # Nome do PVC (ser√° prefixado com o nome do pod)
        namespace: minecraft-server-ns
      spec:
        accessModes: [ "ReadWriteOnce" ] # Permite leitura e escrita por um √∫nico n√≥
        resources:
          requests:
            storage: 10Gi # Tamanho do armazenamento (ajuste conforme necess√°rio)
        # Use a storage class padr√£o do MicroK8s
        storageClassName: "microk8s-hostpath"

---
# 3. Service
# Exp√µe o servidor Minecraft para acesso externo usando NodePort.
apiVersion: v1
kind: Service
metadata:
  name: minecraft-service
  namespace: minecraft-server-ns
  labels:
    app: minecraft-server
spec:
  type: NodePort
  externalTrafficPolicy: Local
  ports:
    - port: 25565
      targetPort: 25565
      nodePort: 32414 # Certifique-se que esta porta n√£o est√° em uso no host
      protocol: TCP
      name: minecraft-tcp
    - port: 25575
      targetPort: 25575
      nodePort: 31249 # Certifique-se que esta porta n√£o est√° em uso no host
      protocol: TCP
      name: rcon-tcp
  selector:
    app: minecraft-server

---
# Create a dedicated PV for the Minecraft data
# This helps ensure there's storage available before the pod is scheduled
# Note: For 'microk8s-hostpath' with dynamic provisioning, manually creating PVs might not always be necessary
# if the StorageClass is set up for it. However, pre-creating can give more control.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minecraft-data-pv
  # NO NAMESPACE FOR PVs (they are cluster-scoped)
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain # Or Delete, depending on your needs
  storageClassName: microk8s-hostpath
  hostPath:
    path: /var/minecraft-data # Ensure this path exists on your MicroK8s node(s) or is creatable
    type: DirectoryOrCreate

---
# Create a dedicated PV for backups
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minecraft-backup-pv
  # NO NAMESPACE FOR PVs
spec:
  capacity:
    storage: 30Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain # Or Delete
  storageClassName: microk8s-hostpath
  hostPath:
    path: /var/minecraft-backups # Ensure this path exists on your MicroK8s node(s) or is creatable
    type: DirectoryOrCreate

---
# 4. PersistentVolumeClaim para armazenar os backups
# This PVC will bind to minecraft-backup-pv
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minecraft-backup-storage
  namespace: minecraft-server-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
  # Use a storage class padr√£o do MicroK8s
  storageClassName: "microk8s-hostpath"
  # If you want to bind to a specific PV, you can add 'volumeName: minecraft-backup-pv'
  # but usually, the storageClassName and size match is sufficient for dynamic or pre-provisioned PVs.

---
# 5. ConfigMap com script de backup
apiVersion: v1
kind: ConfigMap
metadata:
  name: minecraft-backup-script
  namespace: minecraft-server-ns
data:
  backup.sh: |
    #!/bin/bash
    set -eo pipefail # Encerra o script se qualquer comando falhar e trata erros em pipes

    # Configura vari√°veis
    BACKUP_DIR="/backups"
    SOURCE_DIR="/minecraft-data" # This is the mount path inside the backup container
    RETENTION_DAYS=30
    TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
    BACKUP_FILE="$BACKUP_DIR/minecraft-backup-$TIMESTAMP.tar.gz"
    RCON_HOST="minecraft-service.minecraft-server-ns.svc.cluster.local" # Use service DNS
    RCON_PORT_VAR="${RCON_PORT:-25575}" # Use env var RCON_PORT if set, else default
    RCON_PASSWORD_VAR="${RCON_PASSWORD}" # Expect RCON_PASSWORD to be passed as env

    # Verifica se rcon-cli est√° instalado
    if ! command -v rcon-cli &> /dev/null; then
      echo "rcon-cli n√£o encontrado. Tentando instalar..."
      apt-get update && apt-get install -y wget && \
      wget https://github.com/itzg/rcon-cli/releases/download/1.6.0/rcon-cli_1.6.0_linux_amd64.tar.gz -O /tmp/rcon-cli.tar.gz && \
      tar -xzf /tmp/rcon-cli.tar.gz -C /usr/local/bin rcon-cli && \
      rm /tmp/rcon-cli.tar.gz
      if ! command -v rcon-cli &> /dev/null; then
        echo "Falha ao instalar rcon-cli. Continuando sem notifica√ß√µes RCON."
        RCON_AVAILABLE="false"
      else
        echo "rcon-cli instalado com sucesso."
        RCON_AVAILABLE="true"
      fi
    else
      RCON_AVAILABLE="true"
    fi

    send_rcon() {
      if [ "$RCON_AVAILABLE" == "true" ] && [ -n "$RCON_PASSWORD_VAR" ]; then
        echo "Sending RCON command: $1"
        rcon-cli --host "$RCON_HOST" --port "$RCON_PORT_VAR" --password "$RCON_PASSWORD_VAR" "$1" || echo "RCON command failed: $1"
      else
        echo "RCON n√£o dispon√≠vel ou senha n√£o configurada. Comando ignorado: $1"
      fi
    }

    # Envia mensagens ao servidor via RCON
    send_rcon "say ¬ße[SISTEMA] ¬ß6Iniciando backup do servidor... Pode haver alguma lentid√£o."
    send_rcon "save-all"
    send_rcon "save-off"
    sleep 10 # Give some time for save-off to take effect

    # Diret√≥rios e arquivos para excluir do backup
    echo "Iniciando backup em $(date)"
    echo "Compactando arquivos do servidor de $SOURCE_DIR para $BACKUP_FILE"

    # Criar backup com exclus√µes para arquivos problem√°ticos
    # Ensure the source directory is not empty
    if [ -z "$(ls -A $SOURCE_DIR)" ]; then
      echo "Erro: Diret√≥rio de origem $SOURCE_DIR est√° vazio. Abortando backup."
      send_rcon "save-on"
      send_rcon "say ¬ßc[SISTEMA] ¬ß4Falha no backup: Diret√≥rio de dados vazio."
      exit 1
    fi

    tar -czf "$BACKUP_FILE" \
      --exclude="./logs/*.log.gz" \
      --exclude="./crash-reports" \
      --exclude="./debug" \
      --warning=no-file-changed \
      -C "$SOURCE_DIR" .

    BACKUP_STATUS=$?

    # Reativa o salvamento (se RCON dispon√≠vel)
    send_rcon "save-on"

    # Verifica se o backup foi bem-sucedido (aceita c√≥digo 0 ou 1 para tar - file changed)
    if [ $BACKUP_STATUS -eq 0 ] || [ $BACKUP_STATUS -eq 1 ]; then
      echo "Backup conclu√≠do com sucesso: $BACKUP_FILE"
      echo "Tamanho do backup: $(du -h "$BACKUP_FILE" | cut -f1)"
      send_rcon "say ¬ße[SISTEMA] ¬ßaBackup conclu√≠do com sucesso."
    else
      echo "Falha ao criar backup! C√≥digo de erro: $BACKUP_STATUS"
      send_rcon "say ¬ßc[SISTEMA] ¬ß4Falha ao criar backup. Verifique os logs."
      # rm "$BACKUP_FILE" # Optionally remove failed backup attempt
      exit 1
    fi

    # Remove backups mais antigos que o per√≠odo de reten√ß√£o
    echo "Verificando e removendo backups antigos (mais de $RETENTION_DAYS dias)..."
    find "$BACKUP_DIR" -name "minecraft-backup-*.tar.gz" -type f -mtime +"$RETENTION_DAYS" -print -delete

    # Relat√≥rio final de uso de espa√ßo
    echo "Espa√ßo total usado por backups: $(du -sh "$BACKUP_DIR" | cut -f1)"
    echo "Processo de backup finalizado em $(date)."

---
# 6. CronJob para executar o backup automaticamente
apiVersion: batch/v1
kind: CronJob
metadata:
  name: minecraft-backup
  namespace: minecraft-server-ns
spec:
  schedule: "0 */12 * * *"  # A cada 12 horas (√†s 00:00 e 12:00 UTC by default for k8s)
  concurrencyPolicy: Forbid   # N√£o permite execu√ß√µes sobrepostas
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-container
            image: debian:bullseye-slim # Using debian for apt-get if rcon-cli needs install
            command:
            - /bin/bash
            - -c
            - |
              # Ensure rcon-cli is available or install it
              if ! command -v rcon-cli &> /dev/null; then
                echo "rcon-cli not found. Attempting to install..."
                apt-get update && apt-get install -y wget tar gzip && \
                wget https://github.com/itzg/rcon-cli/releases/download/1.6.0/rcon-cli_1.6.0_linux_amd64.tar.gz -O /tmp/rcon-cli.tar.gz && \
                tar -xzf /tmp/rcon-cli.tar.gz -C /usr/local/bin rcon-cli && \
                rm /tmp/rcon-cli.tar.gz && \
                echo "rcon-cli installed."
              fi
              # Execute the backup script
              /scripts/backup.sh
            env: # Pass RCON password to backup script
              - name: RCON_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: minecraft-rcon-secret # You should create this secret
                    key: rcon-password
              # Optionally, if RCON port is different from default 25575 used by itzg/minecraft-server
              # - name: RCON_PORT 
              #   value: "25575" 
            volumeMounts:
            - name: minecraft-data-source
              mountPath: /minecraft-data # Source for backup
              readOnly: true # Acesso somente leitura aos dados do servidor
            - name: backup-storage
              mountPath: /backups # Destination for backups
            - name: backup-script
              mountPath: /scripts # Script location
          restartPolicy: OnFailure
          volumes:
          - name: minecraft-data-source
            persistentVolumeClaim:
              claimName: minecraft-data-minecraft-server-0 # PVC created by the StatefulSet
          - name: backup-storage
            persistentVolumeClaim:
              claimName: minecraft-backup-storage # PVC for backups
          - name: backup-script
            configMap:
              name: minecraft-backup-script
              defaultMode: 0755 # Torna o script execut√°vel

---
# OPTIONAL: Secret for RCON Password
# Create this secret manually or via kubectl:
# kubectl create secret generic minecraft-rcon-secret --from-literal=rcon-password='your_rcon_password_here' -n minecraft-server-ns
#
# apiVersion: v1
# kind: Secret
# metadata:
#   name: minecraft-rcon-secret
#   namespace: minecraft-server-ns
# type: Opaque
# stringData:
#   rcon-password: "minecraft_secure_password" # Same as in StatefulSet env